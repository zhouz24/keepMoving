1、享元模式也叫蝇量模式，运用共享技术有效的支持大量细粒度的对象。（共享对象）
2、常用于系统底层开发，解决系统的性能问题。像数据库连接池。
3、享元模式能够解决重复对象的内存浪费的问题，当系统中有大量相似对象，需要缓冲池，不需要总是创建新对象，可以从缓冲池中拿，可以降低系统内存使用。
4、享元模式的经典应用场景就是池技术，String常量池，数据库连接池、缓冲池等都是享元模式的应用。享元模式是池技术的重要实现方式。

Integer中使用的享元模式，Integer对象的hashcode是返回的封装的值，
        Integer x = Integer.valueOf(127);
        Integer y = new Integer(127);
        Integer z = Integer.valueOf(127);
        Integer h = new Integer(127);
        System.out.println(x.equals(y)); // true
        System.out.println(x == y); // false
        System.out.println(x == z); // true
        System.out.println(y == h); // false
    使用“==”来判断Integer的值比较时，如果使用new出来的，就算在-128~127之间，也是false，
    如果是Integer i = 127 ,Integer j = 127， i == j的结果为true；
    valueOf的使用了享元模式，
    源码如下：public static Integer valueOf(int i) {
                 if (i >= IntegerCache.low && i <= IntegerCache.high)
                     return IntegerCache.cache[i + (-IntegerCache.low)];
                 return new Integer(i);
             }
    IntegerCache.cache即為共享的值。


享是共享，元是對象