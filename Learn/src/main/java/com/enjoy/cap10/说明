AOP:
    1、需要导包
    <!-- AOP -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-aspects</artifactId>
        <version>5.2.0.RELEASE</version>
    </dependency>


各种通知的执行顺序（同时存在前置、后置、环绕、返回、异常）
    不抛出异常的情况下
        环绕的执行方法之前
        前置通知
        目标方法执行
        环绕的执行方法之后
        后置通知
        返回通知
    抛出异常：
        环绕的执行方法之前
        前置通知
        目标方法执行
        后置通知
        异常通知



@Aspect 是声明一个切面类的注解

@EnableAspectJAutoProxy 声明在配置类上，开启AOP功能
@EnableAspectJAutoProxy注解上引入@Import(AspectJAutoProxyRegistrar.class)
AspectJAutoProxyRegistrar.registerBeanDefinitions()创建一个切面类
registerBeanDefinitions()的方法中使用了AnnotationAwareAspectJAutoProxyCreator.class
AnnotationAwareAspectJAutoProxyCreator.class 贯穿整个AOP核心
    继承AspectJAwareAdvisorAutoProxyCreator
        继承AbstractAdvisorAutoProxyCreator
            继承AbstractAutoProxyCreator
                继承ProxyProcessorSupport，实现SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware
                    SmartInstantiationAwareBeanPostProcessor继承InstantiationAwareBeanPostProcessor
                        InstantiationAwareBeanPostProcessor继承BeanPostProcessor
                    ProxyProcessorSupport继承ProxyConfig实现Ordered, BeanClassLoaderAware, AopInfrastructureBean

BeanFactoryAware----可以拿到beanFactory，通过beanFactory获取单例bean
BeanPostProcessor-----BeanPostProcessor是bean的后置处理器，对bean的初始化的一个增强，主要关注bean的初始化的前后的一些处理，自动装配bean


====关注AnnotationAwareAspectJAutoProxyCreator怎么创建？====
    一, 分析创建和注册AnnotationAwareAspectJAutoProxyCreator的流程:
    1）、register()传入配置类，准备创建ioc容器
    2）、注册配置类，调用refresh（）刷新创建容器；
    3）、registerBeanPostProcessors(beanFactory);注册bean的后置处理器来方便拦截bean的创建(主要是分析创建AnnotationAwareAspectJAutoProxyCreator)；
     	1）、 先获取ioc容器已经定义了的需要创建对象的所有BeanPostProcessor
     	2）、给容器中加别的BeanPostProcessor
     	3）、优先注册实现了PriorityOrdered接口的BeanPostProcessor；
     	4）、再给容器中注册实现了Ordered接口的BeanPostProcessor；
     	5）、注册没实现优先级接口的BeanPostProcessor；
     	6）、注册BeanPostProcessor，实际上就是创建BeanPostProcessor对象，保存在容器中；
     		创建internalAutoProxyCreator的BeanPostProcessor【其实就是AnnotationAwareAspectJAutoProxyCreator】
     		1）、创建Bean的实例
     		2）、populateBean；给bean的各种属性赋值
     		3）、initializeBean：初始化bean；
     				1）、invokeAwareMethods()：处理Aware接口的方法回调
     				2）、applyBeanPostProcessorsBeforeInitialization()：应用后置处理器的postProcessBeforeInitialization（）
     				3）、invokeInitMethods()；执行自定义的初始化方法
     				4）、applyBeanPostProcessorsAfterInitialization()；执行后置处理器的postProcessAfterInitialization（）；
     		4）、BeanPostProcessor(AnnotationAwareAspectJAutoProxyCreator)创建成功；--》aspectJAdvisorsBuilder
     	7）、把BeanPostProcessor注册到BeanFactory中；
     		beanFactory.addBeanPostProcessor(postProcessor);

    注意:以上是创建和注册AnnotationAwareAspectJAutoProxyCreator的过程

    我們的bean的創建--》初始化--》init


